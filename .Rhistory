xmat.dyn.fun = areas.sum_to,
restrictions = restrictions,
xmat.coltypes = xmat.coltypes,
xmat.proj = xmat.proj)
library(downscalr)
res2 = downscale(targets = targets,
start.areas = start.areas,
xmat = xmat,
betas = betas,
priors = priors,
xmat.dyn.fun = areas.sum_to,
restrictions = restrictions,
xmat.coltypes = xmat.coltypes,
xmat.proj = xmat.proj)
res2 = downscale(targets = targets,
start.areas = start.areas,
xmat = xmat,
betas = betas,
priors = priors,
xmat.dyn.fun = areas.sum_to,
restrictions = restrictions,
xmat.coltypes = xmat.coltypes,
xmat.proj = xmat.proj)
library(downscalr)
res2 = downscale(targets = targets,
start.areas = start.areas,
xmat = xmat,
betas = betas,
priors = priors,
xmat.dyn.fun = areas.sum_to,
restrictions = restrictions,
xmat.coltypes = xmat.coltypes,
xmat.proj = xmat.proj)
summary2 = (
targets %>%
left_join(
res2$out.res %>%
group_by(lu.from,lu.to,times) %>%
summarize(downscale.value = sum(value),.groups = "keep"),by = c("lu.from", "lu.to","times") ) %>%
mutate(diff = value - downscale.value)
)
range(summary_old$diff - summary2$diff)
test.restrictions_old = res_old$out.res %>%
left_join(restrictions %>% rename("restr" = "value"),by = c("lu.from", "ns", "lu.to"))  %>%
filter(restr == 1)
cat("Restrictions old: ",all(test.restrictions_old$value == 0),"\n")
test.restrictions = res2$out.res %>%
left_join(restrictions %>% rename("restr" = "value"),by = c("lu.from", "ns", "lu.to"))  %>%
filter(restr == 1)
cat("Restrictions: ",all(test.restrictions$value == 0),"\n")
3500*14 + 6000*12
121000 / 12
library(downscalr)
library(downscalr)
argentina_df
View(argentina_luc)
summary(argentina_luc)
unique(argentina_luc$value)
require(tidyverse)
filter(argentina_luc, ns == 101080)
hist(argentina_luc$value)
hist(argentina_luc$value,breaks = 100)
hist(argentina_luc$value[argentina_luc$value != 0],breaks = 100)
View(argentina_df$lu_levels)
View(argentina_df$xmat)
View(argentina_FABLE)
length(unique(argentina_luc$ns))
load("~/Dropbox/ISIMIP3B/downscalr_GAMS.RData")
require(downscalr)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
View(chck.names)
head(priors)
unique(priors[,c("lu.from","lu.to")])
class(priors$lu.from[1])
class(priors$lu.to[1])
# check if all targets are covered as either betas or priors
chck.names = targets  %>% dplyr::left_join(
betas %>% dplyr::group_by(.data$lu.from,.data$lu.to) %>% dplyr::summarize(n = n(),.groups = "keep"),by = c("lu.from", "lu.to"))
chck.names$n[is.na(chck.names$n)] = 0
unique(targets[,c("lu.from","lu.to")])
View(targets)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
unique(targets[,c("lu.from","lu.to")])
targets2 = targets %>%
dplyr::right_join(targets %>%
tidyr::expand(.data$lu.from,.data$lu.to,.data$times),
by = c("times", "lu.from", "lu.to")) %>%
filter(.data$lu.from != .data$lu.to) %>%
tidyr::replace_na(list(value = 0))
unique(targets2[,c("lu.from","lu.to")])
targets2 = targets %>%
dplyr::right_join(targets %>%
tidyr::expand(nesting(.data$lu.from,.data$lu.to),.data$times),
by = c("times", "lu.from", "lu.to")) %>%
filter(.data$lu.from != .data$lu.to) %>%
tidyr::replace_na(list(value = 0))
targets2 = targets %>%
dplyr::right_join(targets %>%
tidyr::expand(nesting(lu.from,lu.to),.data$times),
by = c("times", "lu.from", "lu.to")) %>%
filter(.data$lu.from != .data$lu.to) %>%
tidyr::replace_na(list(value = 0))
unique(targets2[,c("lu.from","lu.to")])
unique(targets2[,c("lu.from","lu.to","times")])
View(targets2)
unique(targets[,c("lu.from","lu.to")])
unique(targets2[,c("lu.from","lu.to")])
dim(targets %>%
tidyr::expand(.data$lu.from,.data$lu.to,.data$times))
dim(targets %>%
tidyr::expand(nesting(.data$lu.from,.data$lu.to),.data$times))
dim(targets %>%
tidyr::expand(nesting(lu.from,lu.to),.data$times))
table((targets %>%
tidyr::expand(nesting(lu.from,lu.to),.data$times))$times)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
unique(luc_downscl_coeff$lu.from)
unique(DDelta$lu.from)
unique(luc_downscl_coeff$lu.from)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
head(xmat)
head(select(xmat,ks) %>% distinct())
require(dplyr)
head(select(xmat,ks) %>% distinct())
head(select(xmat,ns) %>% distinct())
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
mutate(lu.from = ifelse(is.na(lu.from),priors$lu.from[1],lu.from),
lu.to = ifelse(is.na(lu.to),priors$lu.to[1],lu.to))
all(unique(xmat$ns) %in% priors$ns)
priors = priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
mutate(lu.from = ifelse(is.na(lu.from),priors$lu.from[1],lu.from),
lu.to = ifelse(is.na(lu.to),priors$lu.to[1],lu.to)) %>%
dplyr::right_join(priors %>%
tidyr::expand(.data$ns,nesting(lu.from,lu.to)),
.groups = "keep",by= c("ns", "lu.from", "lu.to")) %>%
tidyr::replace_na(list(value = 0))
all(unique(xmat$ns) %in% priors$ns)
head(priors)
prors2 = priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
mutate(lu.from = ifelse(is.na(lu.from),priors$lu.from[1],lu.from),
lu.to = ifelse(is.na(lu.to),priors$lu.to[1],lu.to))
all(unique(xmat$ns) %in% priors2$ns)
all(unique(xmat$ns) %in% prors2$ns)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
tail(priors)
sum(is.na(priors))
priors[which(is.na(priors),arr.ind = T)[,1],]
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
priors2 = priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
tidyr::expand(.data$ns,nesting(lu.from,lu.to))
head(priors2)
all(xmat$ns %in% priors2$ns)
priors2 = priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
tidyr::expand(.data$ns,nesting(lu.from,lu.to)) %>% filter(!is.na(lu.from) & !is.na(lu.to))
all(xmat$ns %in% priors2$ns)
head(priors2)
sum(is.na(priors2))
priors %>%  dplyr::right_join(priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
tidyr::expand(.data$ns,nesting(lu.from,lu.to))  %>% filter(!is.na(lu.from) & !is.na(lu.to)),
.groups = "keep",by= c("ns", "lu.from", "lu.to")) %>%
tidyr::replace_na(list(value = 0))
priors2 = priors %>%  dplyr::right_join(priors %>% right_join(select(xmat,ns) %>% distinct()) %>%
tidyr::expand(.data$ns,nesting(lu.from,lu.to))  %>% filter(!is.na(lu.from) & !is.na(lu.to)),
.groups = "keep",by= c("ns", "lu.from", "lu.to")) %>%
tidyr::replace_na(list(value = 0))
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
rlang::last_error()
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
# Extract targets
curr.targets = filter(targets,times == curr.time) %>% select(-times)
options$solve_fun
res = solve_biascorr.mnl(targets = curr.targets,
areas = curr.areas,
xmat = curr.xmat,
betas = betas,
priors = curr.priors,
restrictions=curr.restrictions,options = options)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
# Extract xmat
## IMPORTANT CHECK ORDER OF VARIABLES FIXED
curr.xmat = dplyr::filter(xmat,ks %in% row.names(curr.betas)) %>%
tidyr::pivot_wider(names_from = "ks",values_from = "value",id_cols = "ns")  %>%
tibble::column_to_rownames(var = "ns") %>%
dplyr::select(rownames(curr.betas))
head(xmat)
row.names(curr.betas)
all(unique(ks %in% row.names(curr.betas)))
curr.xmat = dplyr::filter(xmat,ks %in% row.names(curr.betas))
curr.xmat = dplyr::filter(xmat,ks %in% row.names(curr.betas)) %>%
tidyr::pivot_wider(names_from = "ks",values_from = "value",id_cols = "ns")  %>%
tibble::column_to_rownames(var = "ns")
head(curr.xmat)
all(row.names(curr.betas) %in% colnames(curr.xmat))
dim(curr.xmat)
dim(curr.betas)
all(unique(ks %in% row.names(curr.betas)))
which(!row.names(curr.betas) %in% colnames(curr.xmat))
row.names(curr.betas)[which(!row.names(curr.betas) %in% colnames(curr.xmat))]
head(xmat %>% filter(ks == "ChkP"))
all(unique(ks %in% row.names(curr.betas)))
all(unique(xmat$ks) %in% row.names(curr.betas))
all(row.names(curr.betas) %in% unique(xmat$ks) )
sort(unique(xmat$ks))
load("~/Dropbox/ISIMIP3B/downscalr_GAMS.RData")
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
head(betas)
res = downscale(targets = DDelta,init.areas,xmat,betas = luc_downscl_coeff,priors = curr.SRP_Suit)
head(betas)
head(betas)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
Q
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
dim(curr.xmat)
dim(curr.betas)
k = nrow(curr.betas)
k
n+0
ncol(curr.xmat)!=k
nrow(curr.xmat)!=n
ncol(curr.xmat)!=k || nrow(curr.xmat)!=n
p
p1
p2
head(curr.prior)
head(curr.priors)
p2 = ncol(curr.priors)
if (any(curr.priors<0)) {stop(paste0(err.txt,"Priors must be strictly non-negative."))}
p2
!p == p1 + p2
p
p1 + p2
p1
p2
ncol(curr.betas)
dim(curr.betas)
curr.targets
colnames(curr.betas)
curr.lu.from
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
curr.betas
curr.lu.from
curr.targets
names(targets)
names(curr.targets)
colnames(curr.targets)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
if (options$solve_fun == "solve_biascorr") {
res = solve_biascorr.mnl(targets = curr.targets,
areas = curr.areas,
xmat = curr.xmat,
betas = betas,
priors = curr.priors,
restrictions=curr.restrictions,options = options)
out.solver[[as.character(curr.time)]] = res$out.solver
}
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
curr.targets
out.res2
es.agg <- data.frame(
lu.from=curr.lu.from,out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to"))
es.agg
res.agg <- data.frame(
lu.from=curr.lu.from,out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to"))
curr.targets
curr.targets
head(curr.betas)
err.txt
res.agg <- data.frame(
lu.from=curr.lu.from,out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to"))
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res.agg <- data.frame(
lu.from=curr.lu.from,out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to"))
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
curr.lu.from
curr.lu.to
out.res2
curr.targets
out.solver
lu.from
out.solver[[curr.lu.from]]
dim(out.res2)
names(curr.areas)
out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to")
data.frame(
lu.from=curr.lu.from,out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to"))
out.res2 %>%
pivot_longer(cols = -c("ns"),names_to = "lu.to") %>% bind_cols(lu.from = curr.lu.from)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
err.txt
cat(err.txt,curr.targets)
curr.targets
err.txt
err.txt
err.txt
err.txt
dim(curr.xmat)
dim(curr.betas)
curr.targets
curr.targets
curr.lu.from
targets
curr.lu.from
options$err.txt
curr.lu.from
dim(curr.betas)
dim(curr.xmat)
k
k = nrow(curr.betas)
k
ncol(curr.xmat)!=k || nrow(curr.xmat)!=n
p1
p2
p
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit)
res$out.res
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,areas.update.fun = areas.sum_to)
res$out.res
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,areas.update.fun = areas.sum_to)
help("downscalr")
??downscalr
subest(Yield_Simu,REGION==rrr)
subset(Yield_Simu,REGION==rrr)
subset(Yield_Simu,REGION==rrr) %>% group_by(ns)
subset(Yield_Simu,REGION==rrr) %>% group_by(SimUID)
sum_crop_area
head(xmat)
unique(xmat$ks)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"))
xmat.coltypes
tmp.proj = xmat.dyn.fun(res, curr.areas, priors, xmat, xmat.proj)
head(tmp.proj)
xmat.dyn.fun
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,xmat.dyn.fun = areas.sum_to,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"))
tmp.proj = xmat.dyn.fun(res, curr.areas, priors, xmat, xmat.proj)
head(tmp.proj)
sort(unique(xmat$ks))
head(tmp.proj %>% rename("dyn" = "value"))
xmat.coltypes$ks[xmat.coltypes$value == "projected"]
xmat.coltypes
xmat.coltypes$ks[xmat.coltypes$value == "dynamic"]
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,xmat.dyn.fun = areas.sum_to,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"))
head(tmp.proj)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"))
head(tmp.proj)
head(tmp.proj %>% rename("dyn" = "value") %>%
filter(ks %in% xmat.coltypes$ks[xmat.coltypes$value == "dynamic"]))
xmat = xmat %>%
left_join(tmp.proj %>% rename("dyn" = "value") %>%
filter(ks %in% xmat.coltypes$ks[xmat.coltypes$value == "dynamic"]),by = c("ks","ns"))
head(xmat)
xmat = xmat %>% mutate(value = ifelse(!is.na(.data$dyn),.data$dyn,value)) %>%
dplyr::select(-dyn)
head(xmat)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"))
head((res$out.res %>% group_by(times,lu.from,lu.to) %>% summarize(res1 = sum(value))))
head((res$out.res %>% group_by(times,lu.from,lu.to) %>% summarize(res1 = sum(value))) %>% left_join(DDelta))
head((res$out.res %>% group_by(times,lu.from,lu.to) %>% summarize(res1 = sum(value))) %>% left_join(DDelta) %>% mutate(err = value - res1))
View((res$out.res %>% group_by(times,lu.from,lu.to) %>% summarize(res1 = sum(value))) %>% left_join(DDelta) %>% mutate(err = value - res1))
head(xmat)
head(init.areas)
head(sum_crop_area)
sum_crop_area %>% mutate(value = ifelse(value>0,1,0))
sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.ares %>% filter(ns) %>% distinct())
sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.ares %>% select(ns) %>% distinct())
sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct())
tail(sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()))
tail(sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()) %>% replace_na(list(value = 0) )
)
tail(sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()) %>% tidyr::replace_na(list(value = 0) ))
restrictions = (sum_crop_area %>% mutate(value = ifelse(value>0,1,0)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()) %>% tidyr::replace_na(list(value = 0) ))
dim(restrictions)
length(unique(init.areas))
length(unique(init.areas$ns))
range(sum_crop_area$value)
restrictions = (sum_crop_area %>% mutate(value = ifelse(value>0,0,1)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()) %>% tidyr::replace_na(list(value = 1) ))
tail(restrictions)
restrictions = (sum_crop_area %>% mutate(value = ifelse(value>0,0,1)) %>% rename(ns = SimUID) %>% right_join(init.areas %>% select(ns) %>% distinct()) %>% tidyr::replace_na(list(value = 1) )) %>% tidyr::expand_grid(DDelta %>% distinct(lu.from) %>% bind_cols(lu.to = "CrpLnd") %>% filter(lu.from!=lu.to))
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
complete_restrictions(restrictions,xmat)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
head(restrictions)
curr.restrictions = dplyr::filter(restrictions,lu.from == curr.lu.from) %>%
tidyr::pivot_wider(names_from = lu.to,values_from = "value",id_cols = "ns") %>%
tibble::column_to_rownames(var = "ns")
head(curr.restrictions)
curr.restrictions = curr.restrictions[match(names(curr.areas),row.names(curr.restrictions)),,drop = FALSE]
head(curr.restrictions)
curr.restrictions = as.matrix(curr.restrictions)
p = length(curr.targets)
n = length(curr.areas)
p1 = ncol(curr.betas)
k = nrow(curr.betas)
restr.mat = matrix(0,n,p); colnames(restr.mat) = names(curr.targets)
head(restr.mat)
colnames(curr.restrictions)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
estr.mat[,colnames(curr.restrictions)] = curr.restrictions
restr.mat[,colnames(curr.restrictions)] = curr.restrictions
head(restr.mat)
curr.restrictions
head(curr.restrictions)
err.txt
colnames(curr.restrictions)
curr.lu.from
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions)
View((res$out.res %>% group_by(times,lu.from,lu.to) %>% summarize(res1 = sum(value))) %>% left_join(DDelta) %>% mutate(err = value - res1))
head(sum_crop_area)
head(init.areas)
load("~/Dropbox/ISIMIP3B/ISIMIP3B.Rproj")
load("~/Dropbox/ISIMIP3B/downscalr_GAMS.RData")
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
head(xmat.proj)
tibble::has_name(xmat.proj,"times")
any(xmat.proj$times == PLCHOLD_T)
unique(xmat.proj$times)
curr.crop_projections2 = curr.crop_projections %>% replace_na(list(value = 0))
curr.crop_projections2 = curr.crop_projections %>% dplyr::replace_na(list(value = 0))
curr.crop_projections2 = curr.crop_projections %>% tidyr::replace_na(list(value = 0))
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections2)
sum(is.na(curr.crop_projections2))
head(curr.crop_projections2)
colSums(is.na(curr.crop_projections2))
load("~/Dropbox/ISIMIP3B/downscalr_GAMS.RData")
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
colSums(is.na(curr.crop_projections))
load("~/Dropbox/ISIMIP3B/downscalr_GAMS.RData")
colSums(is.na(curr.crop_projections))
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
Q
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
Q
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
!is.null(xmat.proj)
ns = unique(areas$ns)
ns
!all(ns %in% xmat.proj$ns)
# xmat.proj: Check if we have all combinations
expanded = xmat.proj %>% tidyr::expand(.data$times,.data$ks,.data$ns)
head(xmat.proj)
# xmat.proj: Check if we have all combinations
expanded = xmat.proj %>% tidyr::expand(times,ks,ns)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
# xmat.proj: Check if we have all combinations
expanded = xmat.proj %>% tidyr::expand(times,ks,ns)
nrow(xmat.proj)
unique(xmat.proj$ks)
length(unique(xmat.proj$ks)) * length(unique(xmat.proj$times)) * length(ns)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
res = downscale(targets = DDelta,init.areas,xmat,betas = betas,priors = curr.SRP_Suit,
areas.update.fun = areas.sum_to,xmat.coltypes = data.frame(ks = c("CrpLnd","Grass","OthNatLnd"),value = "dynamic"),restrictions = restrictions,xmat.proj = curr.crop_projections)
available.packages("rlang")
available.packages("devtools")
installed.packages("devtools")
installed.packages()
View(installed.packages())
packagedocs::init_vignettes()
install.packages("pkgdown")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
pkgdown::build_site()
vignette("pkgdown")
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()

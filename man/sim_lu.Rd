% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{sim_lu}
\alias{sim_lu}
\title{Simulating land-use from a data generating process}
\usage{
sim_lu(
  n,
  J = 3,
  tt = 2,
  k = 1,
  areas = stats::runif(n),
  alphas = cbind(matrix(stats::runif(tt * (J - 1)), tt, J - 1), 0),
  xmat = matrix(stats::rnorm(n * k), n, k),
  betas = cbind(matrix(stats::rnorm(k * (J - 1)), k, J - 1), 0)
)
}
\arguments{
\item{n}{Number of spatial observations \eqn{n}.}

\item{J}{Number of land use classes \eqn{J}. Defaults to three.}

\item{tt}{Number of time steps to simulate \eqn{T}. Defaults to two.}

\item{k}{Number of covariates to simulate \eqn{k}. Defaults to one.}

\item{areas}{Vector of dimensions \eqn{n \times 1}. Provides the spatial observation
areas \eqn{a_i} for calculating targets \eqn{T_1,...,T_J}. Defaults to a
random uniform matrix.}

\item{alphas}{Matrix of dimensions \eqn{T \times J}. Provides the true values
for all \eqn{\alpha_{jt}}. The \eqn{J}-th column of the matrix
has to be equal to zero. Defaults to a random uniform matrix.}

\item{xmat}{Matrix of dimensions \eqn{n \times k}. Provides the values for the
matrix \eqn{X}. Defaults to a matrix of random, normally distributed
values (with zero mean and uniform variance).}

\item{betas}{Matrix of dimensions \eqn{k \times J}. Provides the values for \eqn{\beta_1,...,\beta_J}.
The \eqn{J}-th column of the matrix
has to be equal to zero. Defaults to a matrix of random, normally distributed
values (with zero mean and uniform variance).}
}
\value{
A list with the generated \eqn{\alpha} (\code{alphas}), \eqn{X}  (\code{xmat}),
\eqn{\beta}  (\code{betas}), \eqn{Y}  (\code{Y}),
and \eqn{T} (\code{targets}). The returned values are in long format as required by
\code{\link{downscale}}.
}
\description{
This function can be used to generate land use data from a data generating process
}
\details{
The generated multinomial logit land use model over \eqn{J} distinct land uses
(with \eqn{j',j = 1,...,J}) takes the form:

\deqn{
   y_{ijt} = \frac{\exp(\alpha_{jt} + X_i \beta_j)}{ \sum^{J}_{j' = 1} \exp(\alpha_{jt} + X_i \beta_{j'})}
}

with \eqn{X_i} being the \eqn{i}-th row of the \eqn{n \times k} matrix \eqn{X}. \eqn{\beta_j} is the
\eqn{k \times J} matrix of land use class specific slope parameters. \eqn{\alpha_{jt}} are class
specific intercepts, which are typically optimised using the bias correction method. These are assumed
to vary over time.

For the purpose of identification the slope parameters \eqn{\beta_J} and intercepts
\eqn{\alpha_J} associated with the \eqn{J}-th class have to be zero.

The function generates the \eqn{NT \ times J} matrix \eqn{Y}. Based on this, the function
generates a set of targets \eqn{T_{jt}} for downscaling. These are calculated by:

\deqn{
 T_{jt} = \sum^n_{i=1} y_{ijt} a_i
}

The output of this function can be directly used in \code{\link{downscale}}.
}
\examples{
dgp1 = sim_lu(n = 100)
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{sim_luc}
\alias{sim_luc}
\title{Simulating land-use change from a data generating process}
\usage{
sim_luc(
  n,
  J = 3,
  tt = 2,
  k = 1,
  areas = matrix(runif(n * J), n, J),
  alphas = replicate(J, cbind(matrix(stats::runif(tt * (J - 1)), tt, J - 1), 0), simplify
    = FALSE),
  xmat = matrix(stats::rnorm(n * k), n, k),
  betas = replicate(J, cbind(matrix(stats::rnorm(k * (J - 1)), k, J - 1), 0), simplify =
    FALSE)
)
}
\arguments{
\item{n}{Number of spatial observations \eqn{n}.}

\item{J}{Number of land use classes \eqn{J}. Defaults to three.}

\item{tt}{Number of time steps to simulate \eqn{T}. Defaults to two.}

\item{k}{Number of covariates to simulate \eqn{k}. Defaults to one.}

\item{areas}{A matrix of dimensions \eqn{n \times J}.
Provides the spatial observation of
areas \eqn{a_{ij1}} in \eqn{t=1} for calculating targets \eqn{T_1,...,T_J}. Defaults to a
random uniform matrix.}

\item{alphas}{A list of length \eqn{J}. Each list item contains a matrix of dimensions \eqn{T \times J}.
These provide the true values for all \eqn{\alpha_{ljt}}. The \eqn{J}-th column of the matrix
has to be equal to zero. Defaults to a list containing random uniform matrices.}

\item{xmat}{Matrix of dimensions \eqn{n \times k}. Provides the values for the
matrix \eqn{X}. Defaults to a matrix of random, normally distributed
values (with zero mean and uniform variance).}

\item{betas}{A list of length \eqn{J}. Each list item contains a matrix of dimensions
\eqn{k \times J}. Provides the values for each \eqn{\beta_{1l},...,\beta_{jl}}.
The \eqn{J}-th column of the matrix
has to be equal to zero. Defaults to a list containing \eqn{J} matrices of
random, normally distributed values (with zero mean and uniform variance).}
}
\value{
A list with the generated \eqn{\alpha} (\code{alphas}), \eqn{X}  (\code{xmat}),
\eqn{\beta}  (\code{betas}), \eqn{Y}  (\code{Y}),
and \eqn{T} (\code{targets}). The returned values are in long format as required by
\code{\link{downscale}}.
}
\description{
This function can be used to generate land use change data from a data generating process
}
\details{
The function simulates a set of \eqn{J} different multinomial logit land use models over \eqn{J} distinct land uses
(with \eqn{j',j = 1,...,J}). Each of the models takes the form:

\deqn{
   y_{iljt} = \frac{\exp(\alpha_{ljt} + X_i \beta_{lj})}{ \sum^{J}_{j' = 1} \exp(\alpha_{ljt} + X_i \beta_{lj'})}
}

where \eqn{l} denotes the individual multinomial logit models. \eqn{X_i} is the \eqn{i}-th
row of the \eqn{n \times k} matrix \eqn{X}. \eqn{\beta_j} is the
\eqn{k \times J} matrix of land use class specific slope parameters. \eqn{\alpha_{jt}} are class
specific intercepts, which are typically optimised using the bias correction method. These are assumed
to vary over time.

For the purpose of identification the slope parameters \eqn{\beta_J} and intercepts
\eqn{\alpha_J} associated with the \eqn{J}-th class have to be zero.

Each of the \eqn{J} different models captures land use being converted from the \eqn{l}-th land use class
to \eqn{J} other land uses.

The function generate \eqn{J} different  \eqn{NT \ times J} matrices \eqn{Y_l}. Based on these, the function
generates a set of targets \eqn{T_{ljt}} for downscaling. These are calculated by:

\deqn{
 T_{ljt} = \sum^n_{i=1} y_{iljt} a_{ilt}.
}

The initial values for \eqn{a_il1} are randomly generated. After this the values of \eqn{a_{ilt}} are dynamicall
updated through:

\deqn{
a_{ilt+1} = \sum^n_{j=1} y_{iljt} a_{ilt}
}

The output of this function can be directly used in \code{\link{downscale}}.
}
\examples{
dgp1 = sim_luc(n = 100)
}
